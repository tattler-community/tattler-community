image: python:3.9

stages:
  - test_py
  - deploy_docs

test_py:
  stage: test_py
  coverage: '/^Code coverage:\s\d+$/'
  cache:
    key: tattler_cache
    paths:
      - venv/
      - .cache/pip/
      - urlcache.csv
  script:
    # setup: base system
    - WD=$(pwd)
    - echo "Working directory is $WD"
    - echo "Creating venv ..."
    - test venv -nt .gitlab-ci.yml || python -m venv venv
    - . venv/bin/activate
    - pip install coverage
    ## server
    - echo "tattler server"
    - pip install -r ${WD}/src/tattler/server/docs/requirements_test.txt
    - pip freeze
    ## sendable
    - cd ${WD}/src/tattler/server/sendable/tests
    - PYTHONPATH=.:${WD}/src coverage run -m unittest discover
    - cd ${WD}/src/tattler/server/tests
    - LOG_LEVEL=debug PYTHONPATH=.:${WD}/src coverage run -m unittest discover
    ## plugins
    - cd ${WD}/src/tattler/server/plugins/tests
    - PYTHONPATH=.:${WD}/src coverage run -m unittest discover
    ## client
    - echo "tattler client"
    - cd ${WD}/src/tattler/client/tattler_py
    - pip install -r docs/requirements_test.txt
    - pip freeze
    - cd tests
    - LOG_LEVEL=debug PYTHONPATH=.:${WD}/src coverage run -m unittest discover
    ## print coverage information
    - cd $WD
    - coverage combine $(find . -name .coverage)
    - printf 'Code coverage:\t' ; coverage report --omit='**/tests/**' --format=total --precision=0 ; echo ""
    ## packaging
    - echo "tattler server packaging"
    - cd ${WD}
    - pip install build
    - python -m build
    - pip install dist/tattler-1.4.0-py3-none-any.whl
    ## validate links
    - echo "Validating links"
    - cd $WD/utils
    - python validate_links.py ../src ${WD}/urlcache.csv

pages:
  stage: deploy_docs
  cache:
    key: docs_cache
    paths:
      - venv_docs
  only:
    changes:
      - "docs/**/*"
      - .gitlab-ci.yml
  script:
    - WD=$(pwd)
    - rm -rf .public public
    - mkdir -p .public
    - echo Test that tattler version declared in code matches version declared in docs
    - cd ${WD}
    - version_package=$(awk -F= '/^version/ { print $2 }' pyproject.toml | grep -Eo '[0-9.]+')
    - cd ${WD}/docs
    - pip install -r requirements_docs.txt
    - make html
    - version_docs=$(awk -F= '/^release/ { print $2 }' source/conf.py | grep -Eo '[0-9.]+')
    - echo Version numbers of package and docs $version_package vs $version_docs
    - test -n "$version_package" -a "$version_package" = "$version_docs"
    - cd $WD
    - echo Build documentation
    - test -d venv_docs -a ${WD}/docs/requirements_docs.txt -nt venv_docs && rm -rf venv_docs
    - test -d venv_docs || python3 -m venv venv_docs
    - . venv_docs/bin/activate
    - test venv_docs -nt ${WD}/docs/requirements_docs.txt || pip install -r ${WD}/docs/requirements_docs.txt
    - cd ${WD}/docs
    - PYTHONPATH=${WD}/src make html
    - cp -R build/html/* ${WD}/.public/
    - cd $WD
    - ls .public
    - mv .public public
  artifacts:
    paths:
      - public
